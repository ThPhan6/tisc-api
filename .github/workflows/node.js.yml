# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: TISC CI

on:
  push:
    branches: [master, dev, staging, bugs/sonar]
  pull_request:
    branches: [master, dev, staging]

jobs:
  quality-control:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' # run this job only for the dev branch
    steps:
      - uses: actions/checkout@v3
      - name: Quality Control with Sonar
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    # - run: npm ci
    # - run: npm run build --if-present
    # - run: npm test
  deploy-dev-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' # run this job only for the dev branch
    steps:
      # DigitalOcean Droplet already have deploy files
      - uses: actions/checkout@v3
      - name: Deploy TISC API to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: /var/www/dev/cdScript.sh dev
  deploy-staging-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' # run this job only for the staging branch
    steps:
      # DigitalOcean Droplet already have deploy files
      - uses: actions/checkout@v3
      - name: Deploy TISC API to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_SERVER_IP }}
          username: ${{ secrets.DEV_SERVER_USERNAME }}
          key: ${{ secrets.DEV_SERVER_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: /var/www/cdScript.sh staging
  deploy-production-server:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' # run this job only for the staging branch
    steps:
      # DigitalOcean Droplet already have deploy files
      - uses: actions/checkout@v3
      - name: Deploy TISC API to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_SERVER_IP }}
          username: ${{ secrets.PRODUCTION_SERVER_USERNAME }}
          key: ${{ secrets.PRODUCTION_SERVER_SSH_PRIVATE_KEY }}
          port: ${{ secrets.PRODUCTION_SERVER_PORT }}
          script: /var/www/cdScript.sh production

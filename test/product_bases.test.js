const dotenv = require("dotenv");
dotenv.config();
const chai = require("chai");
const chaiHttp = require("chai-http");
const should = chai.should();
chai.use(chaiHttp);
const HOST_URL = process.env.API_URL;
const tiscAdminToken = process.env.TEST_TISC_ADMIN_TOKEN;
let conversionId = "";
let presetId = "";
let optionId = "";
const uuid = require("uuid").v4;

const fileTxt =
  "Z2hwX1FTR2IzcnNRTFZLM0dIRDZCZHpQY0p4SGdHVXlDeTN3V0xqVSBUaWVuRVMKbVpjRUVVWE5nRXZmZ0pRTlRtNGcgVGllbiBCaXRidWNrZXQK";
const imgBase64 =
  "";
describe("Product Bases API", () => {
  beforeEach((done) => {
    done();
  });
  describe("Product conversions", () => {
    describe("Create", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-conversion/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "LENGTH - 1",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "25.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            conversionId = res.body.data.id;
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys("id", "name", "subs", "created_at");
            res.body.data.subs.map((item) => {
              item.should.have.keys(
                "id",
                "name_1",
                "name_2",
                "formula_1",
                "formula_2",
                "unit_1",
                "unit_2"
              );
            });
            done();
          });
      });
      it("conversions exists", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-conversion/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send(
            {
              name: "LENGTH",
              subs: [
                {
                  name_1: "Millimeter",
                  name_2: "Inch",
                  formula_1: "25.4",
                  formula_2: "1",
                  unit_1: "mm",
                  unit_2: "in",
                },
              ],
            },
            {
              name: "LENGTH",
              subs: [
                {
                  name_1: "Millimeter",
                  name_2: "Inch",
                  formula_1: "25.4",
                  formula_2: "1",
                  unit_1: "mm",
                  unit_2: "in",
                },
              ],
            }
          )
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });
      it("Duplicate conversion group", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-conversion/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send(
            {
              name: "LENGTH",
              subs: [
                {
                  name_1: "Millimeter",
                  name_2: "Inch",
                  formula_1: "25.4",
                  formula_2: "1",
                  unit_1: "mm",
                  unit_2: "in",
                },
              ],
            },
            {
              name: "LENGTH",
              subs: [
                {
                  name_1: "Millimeter",
                  name_2: "Inch",
                  formula_1: "25.4",
                  formula_2: "1",
                  unit_1: "mm",
                  unit_2: "in",
                },
              ],
            }
          )
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });
      it("Duplicate conversion group", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-conversion/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "LENGTH",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "25.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-conversion/create/asd")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "LENGTH",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "25.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-conversion/create")
          .send({
            name: "LENGTH",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "25.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Get one", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-one/" + conversionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys("id", "name", "subs", "created_at");
            res.body.data.subs.map((item) => {
              item.should.have.keys(
                "id",
                "name_1",
                "name_2",
                "formula_1",
                "formula_2",
                "unit_1",
                "unit_2",
                "conversion_between",
                "first_formula",
                "second_formula"
              );
            });

            done();
          });
      });
      it("Conversion not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-one/" + conversionId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-one/abc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-one/" + conversionId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });
    describe("Get list", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-list")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "basis_conversions",
              "summary",
              "pagination"
            );
            res.body.data.basis_conversions.should.be.a("array");
            res.body.data.basis_conversions.map((item) => {
              item.should.have.keys(
                "id",
                "name",
                "subs",
                "created_at",
                "count"
              );
              item.subs.map((sub) => {
                sub.should.have.keys(
                  "id",
                  "name_1",
                  "name_2",
                  "formula_1",
                  "formula_2",
                  "unit_1",
                  "unit_2",
                  "conversion_between",
                  "first_formula",
                  "second_formula"
                );
              });
            });
            res.body.data.summary.should.be.a("array");
            res.body.data.summary.map((item) => {
              item.should.have.property("name");
              item.should.have.property("value");
            });
            res.body.data.pagination.should.have.keys(
              "page",
              "page_size",
              "total",
              "page_count"
            );
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-list/abc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })

          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-conversion/get-list")
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Update", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-conversion/update/" + conversionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "LENGTH",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "20.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys("id", "name", "subs", "created_at");
            res.body.data.subs.map((item) => {
              item.should.have.keys(
                "id",
                "name_1",
                "name_2",
                "formula_1",
                "formula_2",
                "unit_1",
                "unit_2"
              );
            });

            done();
          });
      });
      it("Basis conversion not found", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-conversion/update/" + conversionId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "LENGTH",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "20.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-conversion/update/" + conversionId + "/zxc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "LENGTH",
            subs: [
              {
                name_1: "Millimeter",
                name_2: "Inch",
                formula_1: "20.4",
                formula_2: "1",
                unit_1: "mm",
                unit_2: "in",
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-conversion/update/" + conversionId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });
    describe("Delete", () => {
      it("conversion not found", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-conversion/delete/" + conversionId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-conversion/delete/" + conversionId + "/zxc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-conversion/delete/" + conversionId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-conversion/delete/" + conversionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("statusCode", 200);
            res.body.should.have.property("message");
            done();
          });
      });
    });
  });

  describe("Product presets", () => {
    describe("Create", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-preset/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            presetId = res.body.data.id;
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "id",
              "name",
              "count",
              "subs",
              "created_at"
            );
            res.body.data.subs.map((preset) => {
              preset.should.have.keys("id", "name", "count", "subs");
              preset.subs.map((item) => {
                item.should.have.keys(
                  "id",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });

            done();
          });
      });
      it("Basis preset exists", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-preset/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });
      it("Duplicate preset", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-preset/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL 2",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx 1",
                    value_2: "Slate 1",
                    unit_1: "Marble 1",
                    unit_2: "Matt 1",
                  },
                ],
              },
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx 2",
                    value_2: "Slate 2",
                    unit_1: "Marble 2",
                    unit_2: "Matt 2",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });

      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-preset/create/asd")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-preset/create")
          .send({
            name: "MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Get one", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-one/" + presetId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "id",
              "name",
              "subs",
              "created_at",
              "count"
            );
            res.body.data.subs.map((preset) => {
              preset.should.have.keys("id", "name", "count", "subs");
              preset.subs.map((item) => {
                item.should.have.keys(
                  "id",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });
            done();
          });
      });
      it("Basis preset not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-one/" + presetId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-one/abc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-one/" + presetId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });
    describe("Get list", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-list")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);

            res.body.data.should.have.keys(
              "basis_presets",
              "summary",
              "pagination"
            );

            res.body.data.basis_presets.should.be.a("array");
            res.body.data.basis_presets.map((presetGroup) => {
              presetGroup.should.have.keys("id", "name", "subs", "created_at");
              presetGroup.subs.map((preset) => {
                preset.should.have.keys("id", "name", "subs", "count");
                preset.subs.map((value) => {
                  value.should.have.keys(
                    "id",
                    "value_1",
                    "value_2",
                    "unit_1",
                    "unit_2"
                  );
                });
              });
            });

            res.body.data.summary.should.be.a("array");
            res.body.data.summary.map((item) => {
              item.should.have.keys("name", "value");
            });

            res.body.data.pagination.should.have.keys(
              "page",
              "page_size",
              "total",
              "page_count"
            );
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-list/abc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })

          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-preset/get-list")
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Update", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-preset/update/" + presetId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);

            res.body.data.should.have.keys(
              "id",
              "name",
              "count",
              "subs",
              "created_at"
            );

            res.body.data.subs.map((preset) => {
              preset.should.have.keys("id", "name", "count", "subs");
              preset.subs.map((item) => {
                item.should.have.keys(
                  "id",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });

            done();
          });
      });
      it("Basis preset not found", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-preset/update/" + presetId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-preset/update/" + presetId + "/zxc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "MATERIAL MATERIAL",
            subs: [
              {
                name: "Stone",
                subs: [
                  {
                    value_1: "Onyx",
                    value_2: "Slate",
                    unit_1: "Marble",
                    unit_2: "Matt",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-preset/update/" + presetId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });
    describe("Delete", () => {
      it("Basis preset not found", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-preset/delete/" + presetId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-preset/delete/" + presetId + "/zxc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-preset/delete/" + presetId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-preset/delete/" + presetId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("statusCode", 200);
            res.body.should.have.property("message");
            done();
          });
      });
    });
  });

  describe("Product options", () => {
    describe("Create", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-option/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            optionId = res.body.data.id;
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);

            res.body.data.should.have.keys(
              "id",
              "name",
              "created_at",
              "count",
              "subs"
            );

            res.body.data.subs.should.be.a("array");
            res.body.data.subs.map((option) => {
              option.should.have.keys("id", "name", "count", "subs");
              option.subs.should.be.a("array");
              option.subs.map((value) => {
                value.should.have.keys(
                  "id",
                  "image",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });
            done();
          });
      });
      it("Success with option image", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-option/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard" + uuid(),
            subs: [
              {
                name: "Title Format",
                is_have_image: true,
                subs: [
                  {
                    image: imgBase64,
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            presetId = res.body.data.id;
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "id",
              "name",
              "created_at",
              "count",
              "subs"
            );
            res.body.data.subs.should.be.a("array");
            res.body.data.subs.map((option) => {
              option.should.have.keys("id", "name", "count", "subs");
              option.subs.should.be.a("array");
              option.subs.map((value) => {
                value.should.have.keys(
                  "id",
                  "image",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });
            done();
          });
      }).timeout(5000);
      it("Invalid image", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-option/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard" + uuid(),
            subs: [
              {
                name: "Title Format",
                is_have_image: true,
                subs: [
                  {
                    image: fileTxt,
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("statusCode", 400);
            res.body.should.have.property("message");
            done();
          });
      });

      it("Basis option exists", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-option/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });
      it("Duplicate basis option", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-option/create")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard" + uuid(),
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 400);
            done();
          });
      });

      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-option/create/asd")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .post("/basis-preset/create")
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Get one", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-one/" + optionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);

            res.body.data.should.have.keys(
              "id",
              "name",
              "subs",
              "created_at",
              "count"
            );
            res.body.data.subs.map((option) => {
              option.should.have.keys("id", "name", "count", "subs");
              option.subs.map((value) => {
                value.should.have.keys(
                  "id",
                  "image",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });

            done();
          });
      });
      it("Basis option not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-one/" + optionId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message", "Basis option not found");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-one/abc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-one/" + optionId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Get list", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-list")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "basis_options",
              "summary",
              "pagination"
            );
            res.body.data.basis_options.should.be.a("array");
            res.body.data.basis_options.map((optionGroup) => {
              optionGroup.should.have.keys(
                "id",
                "name",
                "subs",
                "created_at",
                "count"
              );
              optionGroup.subs.map((option) => {
                option.should.have.keys("id", "name", "subs", "count");
                option.subs.map((value) => {
                  value.should.have.keys(
                    "id",
                    "image",
                    "value_1",
                    "value_2",
                    "unit_1",
                    "unit_2"
                  );
                });
              });
            });
            res.body.data.summary.should.be.a("array");
            res.body.data.summary.map((item) => {
              item.should.have.keys("name", "value");
            });
            res.body.data.pagination.should.have.keys(
              "page",
              "page_size",
              "total",
              "page_count"
            );
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-list/abc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })

          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .get("/basis-option/get-list")
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });

    describe("Update", () => {
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-option/update/" + optionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "id",
              "name",
              "subs",
              "created_at",
              "count"
            );
            res.body.data.subs.map((option) => {
              option.should.have.keys("id", "name", "count", "subs");
              option.subs.map((value) => {
                value.should.have.keys(
                  "id",
                  "image",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });
            done();
          });
      });
      it("Success with option image", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-option/update/" + optionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: true,
                subs: [
                  {
                    image: imgBase64,
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("data");
            res.body.should.have.property("statusCode", 200);
            res.body.data.should.have.keys(
              "id",
              "name",
              "created_at",
              "count",
              "subs"
            );
            res.body.data.subs.should.be.a("array");
            res.body.data.subs.map((option) => {
              option.should.have.keys("id", "name", "count", "subs");
              option.subs.should.be.a("array");
              option.subs.map((value) => {
                value.should.have.keys(
                  "id",
                  "image",
                  "value_1",
                  "value_2",
                  "unit_1",
                  "unit_2"
                );
              });
            });
            done();
          });
      });
      it("Invalid image", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-option/update/" + optionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: true,
                subs: [
                  {
                    image: fileTxt,
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(400);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("statusCode", 400);
            res.body.should.have.property("message");
            done();
          });
      });

      it("Basis option not found", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-option/update/" + optionId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message", "Basis option not found");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-option/update/" + optionId + "/zxc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .put("/basis-preset/update/" + presetId)
          .send({
            name: "Stone Standard",
            subs: [
              {
                name: "Title Format",
                is_have_image: false,
                subs: [
                  {
                    value_1: "6.4",
                    value_2: "1/4",
                    unit_1: "mm",
                    unit_2: "inch",
                  },
                ],
              },
            ],
          })
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
    });
    describe("Delete", () => {
      it("Basis option not found", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-option/delete/" + optionId + "123")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Not found", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-option/delete/" + optionId + "/zxc")
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(404);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("message");
            res.body.should.have.property("statusCode", 404);
            done();
          });
      });
      it("Missing headers authorization ", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-option/delete/" + optionId)
          .end((_err, res) => {
            res.should.have.status(401);
            res.should.be.json;
            res.body.should.have.property("statusCode", 401);
            res.body.should.have.property("error");
            res.body.should.have.property("message");
            done();
          });
      });
      it("Success", (done) => {
        chai
          .request(HOST_URL)
          .delete("/basis-option/delete/" + optionId)
          .set({ Authorization: `Bearer ${tiscAdminToken}` })
          .end((_err, res) => {
            res.should.have.status(200);
            res.should.be.json;
            res.body.should.be.a("object");
            res.body.should.have.property("statusCode", 200);
            res.body.should.have.property("message");
            done();
          });
      });
    });
  });
});
